name: Build chiaki-ng weekly

on:
  workflow_dispatch:
  schedule:
    - cron: "30 1 * * 1"

jobs:
  create-release:
    name: Upload weekly release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
    - name: generate release notes
      working-directory: ${{ github.workspace }}
      run: |
        echo -e "Weekly Test Build\n" > release_notes.md
    - uses: ncipollo/release-action@v1
      id: maker
      with:
        prerelease: true
        commit: ${{ github.sha }}
        tag: weekly-canary-release-${{ github.sha }}
        allowUpdates: true
        bodyFile: "${{ github.workspace }}/release_notes.md"
        token: "${{ secrets.RELEASE_PAT }}"
    - uses: sgpublic/delete-release-action@v1.2
      with:
        repo: 'streetpea/chiaki-ng'
        release-drop: false
        pre-release-drop: true
        pre-release-keep-count: 1
        pre-release-drop-tag: true
        draft-drop: false
      env:
        GITHUB_TOKEN: ${{ github.token }}
    outputs:
      upload_url: ${{ steps.maker.outputs.upload_url }}

  build-win_x64:
    name: Build chiaki-ng win_x64 (VC)
    runs-on: windows-latest
    permissions:
      contents: write
    needs: create-release
    env:
      CC: clang-cl.exe
      CXX: clang-cl.exe
      VULKAN_SDK: C:\VulkanSDK\
      triplet: x64-windows
      vcpkg_baseline: 42bb0d9e8d4cf33485afb9ee2229150f79f61a1f
      VCPKG_INSTALLED_DIR: ./vcpkg_installed/
      dep_folder: deps
      libplacebo_tag: v7.349.0

    defaults:
      run:
        shell: powershell

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Setup Vulkan
        run: |
          $ProgressPreference = 'SilentlyContinue'
          $ver = (Invoke-WebRequest -Uri "https://vulkan.lunarg.com/sdk/latest.json" | ConvertFrom-Json).windows
          echo Version $ver
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/$ver/windows/VulkanSDK-$ver-Installer.exe" -OutFile VulkanSDK.exe
          echo Downloaded
          .\VulkanSDK.exe --root ${{ env.VULKAN_SDK }}  --accept-licenses --default-answer --confirm-command install

      - name: Set up Ninja
        run: choco install ninja

      - name: Set up Clang
        uses: egor-tensin/setup-clang@v1
        with:
          version: 18

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: "x64"

      - name: Install pip dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade setuptools wheel
          python3 -m pip install --user --upgrade scons protobuf grpcio-tools pyinstaller
          python3 -m pip install --user --upgrade meson
          python3 -c 'import google.protobuf; print(google.protobuf.__file__)'

      - name: Setup Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: "6.7.*"
          host: 'windows'
          target: 'desktop'
          modules: 'qtwebengine qtpositioning qtwebchannel qtwebsockets qtserialport'

      - name: Setup ffmpeg
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -UseBasicParsing -Uri "https://github.com/r52/FFmpeg-Builds/releases/download/latest/ffmpeg-n7.1-latest-win64-gpl-shared-7.1.zip" -OutFile ".\ffmpeg-n7.1-latest-win64-gpl-shared-7.1.zip"
          Expand-Archive -LiteralPath "ffmpeg-n7.1-latest-win64-gpl-shared-7.1.zip" -DestinationPath "."
          Rename-Item "ffmpeg-n7.1-latest-win64-gpl-shared-7.1" "${{ env.dep_folder }}"

      - name: Build SPIRV-Cross
        run: |
          git clone https://github.com/KhronosGroup/SPIRV-Cross.git
          cd SPIRV-Cross
          cmake `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_INSTALL_PREFIX="${{ github.workspace }}\${{ env.dep_folder }}" `
          -DSPIRV_CROSS_SHARED=ON `
          -S . `
          -B build `
          -G Ninja
          cmake --build build --config Release
          cmake --install build

      - name: Setup shaderc
        run: |
          $ProgressPreference = 'SilentlyContinue'
          $url = ((Invoke-WebRequest -UseBasicParsing -Uri "https://storage.googleapis.com/shaderc/badges/build_link_windows_vs2019_release.html").Content | Select-String -Pattern 'url=(.*)"').Matches.Groups[1].Value
          Invoke-WebRequest -UseBasicParsing -Uri $url -OutFile .\shaderc.zip
          Expand-Archive -LiteralPath "shaderc.zip" -DestinationPath "."
          cp "./install/*" "./${{ env.dep_folder }}" -Force -Recurse
          rm "./install" -r -force

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.vcpkg_baseline }}
          runVcpkgInstall: true
          vcpkgJsonGlob: "vcpkg.json"

      - name: Build libplacebo
        run: |
          git clone --recursive https://github.com/haasn/libplacebo.git
          cd libplacebo
          git checkout --recurse-submodules ${{ env.libplacebo_tag }}
          git apply --ignore-whitespace --verbose ../scripts/flatpak/0002-Vulkan-use-16bit-for-p010.patch
          meson setup `
          --prefix "${{ github.workspace }}\${{ env.dep_folder }}" `
          --native-file ../meson.ini `
          "--pkg-config-path=['${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\lib\pkgconfig','${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\share\pkgconfig','${{ github.workspace }}\${{ env.dep_folder }}\lib\pkgconfig']" `
          "--cmake-prefix-path=['${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}', '${{ env.VULKAN_SDK }}', '${{ github.workspace }}\${{ env.dep_folder }}']" `
          -Dc_args="/I ${{ env.VULKAN_SDK }}Include" `
          -Dcpp_args="/I ${{ env.VULKAN_SDK }}Include" `
          -Dc_link_args="/LIBPATH:${{ env.VULKAN_SDK }}Lib" `
          -Dcpp_link_args="/LIBPATH:${{ env.VULKAN_SDK }}Lib" `
          -Ddemos=false `
          ./build
          ninja -C./build
          ninja -C./build install

      - name: Apply Patches
        run: |
          git apply --ignore-whitespace --verbose --directory=third-party/gf-complete/ scripts/windows-vc/gf-complete.patch
          git apply --ignore-whitespace --verbose scripts/windows-vc/libplacebo-pc.patch

      - name: Configure chiaki-ng
        run: |
          cmake `
          -S . `
          -B build `
          -G Ninja `
          -DCMAKE_TOOLCHAIN_FILE:STRING="vcpkg/scripts/buildsystems/vcpkg.cmake" `
          -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=TRUE `
          -DCMAKE_BUILD_TYPE=Release `
          -DCHIAKI_ENABLE_CLI=OFF `
          -DCHIAKI_GUI_ENABLE_SDL_GAMECONTROLLER=ON `
          -DCHIAKI_ENABLE_STEAMDECK_NATIVE=OFF `
          -DCHIAKI_ENABLE_STEAM_SHORTCUT=OFF `
          -DPYTHON_EXECUTABLE="${{ env.pythonLocation }}\python.exe" `
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}\${{ env.dep_folder }};${{ env.VULKAN_SDK }}"

      - name: Build chiaki-ng
        run: |
          cmake --build build --config Release --clean-first --target chiaki

      - name: Prepare Qt deployment package
        run: |
          mkdir chiaki-ng-Win
          cp build\gui\chiaki.exe chiaki-ng-Win
          cp scripts\qtwebengine_import.qml gui\src\qml\
          cp "${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\bin\libcrypto-*-x64.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\bin\libssl-*-x64.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\bin\SDL2.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\bin\hidapi.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\bin\fftw3.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\bin\opus.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\bin\libspeexdsp.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\bin\lcms2.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\bin\miniupnpc.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\vcpkg_installed\${{ env.triplet }}\bin\json-c.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\${{ env.dep_folder }}\bin\swresample-*.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\${{ env.dep_folder }}\bin\avcodec-*.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\${{ env.dep_folder }}\bin\avutil-*.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\${{ env.dep_folder }}\bin\avformat-*.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\${{ env.dep_folder }}\bin\libplacebo-*.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\${{ env.dep_folder }}\bin\shaderc_shared.dll" chiaki-ng-Win
          cp "${{ github.workspace }}\${{ env.dep_folder }}\bin\spirv-cross-c-shared.dll" chiaki-ng-Win
          windeployqt.exe --no-translations --qmldir=gui\src\qml --release chiaki-ng-Win\chiaki.exe

      - name: Package chiaki-ng
        run: |
          $CHIAKI_VERSION_MAJOR = (Select-String -Path .\CMakeLists.txt -Pattern 'set\(CHIAKI_VERSION_MAJOR ([0-9]+)\)') | %{$_.Matches.Groups[1].value}
          $CHIAKI_VERSION_MINOR = (Select-String -Path .\CMakeLists.txt -Pattern 'set\(CHIAKI_VERSION_MINOR ([0-9]+)\)') | %{$_.Matches.Groups[1].value}
          $CHIAKI_VERSION_PATCH = (Select-String -Path .\CMakeLists.txt -Pattern 'set\(CHIAKI_VERSION_PATCH ([0-9]+)\)') | %{$_.Matches.Groups[1].value}
          $RELEASE_PACKAGE_FILE = "chiaki-ng-win_x64-VC-portable-$CHIAKI_VERSION_MAJOR.$CHIAKI_VERSION_MINOR.$CHIAKI_VERSION_PATCH-pre-release-${{ github.sha }}.zip"
          Compress-Archive chiaki-ng-Win $RELEASE_PACKAGE_FILE
          $release_filepath = Get-ChildItem $RELEASE_PACKAGE_FILE | %{$_[0].FullName}
          echo "RELEASE_PACKAGE_PATH=$release_filepath" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload chiaki-ng Artifact
        uses: nanoufo/action-upload-artifacts-and-release-assets@v2
        with:
          name: chiaki-ng-win_x64-VC-Release
          path: ${{ env.RELEASE_PACKAGE_PATH }}
          upload-release-files: true
          if-no-files-found: error
          release-upload-url: ${{ needs.create-release.outputs.upload_url }}

      - name: Compile .ISS to .EXE Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: "scripts/chiaki-ng.iss"
          options: /O+

      - name: Rename installer
        run: |
          cp chiaki-ng-windows-installer.exe chiaki-ng-win_x64-VC-installer.exe

      - name: Upload chiaki-ng Artifact
        uses: nanoufo/action-upload-artifacts-and-release-assets@v2
        with:
          path: chiaki-ng-win_x64-VC-installer.exe
          upload-release-files: true
          if-no-files-found: error
          release-upload-url: ${{ needs.create-release.outputs.upload_url }}

  build-mac_arm64_github:
    name: Build macOSX arm64 version Github
    runs-on: macos-14
    permissions:
      contents: write
    needs: create-release
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install protobuf
        run: |
          pip3 install --user protobuf --break-system-packages
      - name: Install brew dependencies
        run: |
          brew update
          brew uninstall pkgconfig || true
          brew install qt@6 ffmpeg pkgconfig opus openssl cmake ninja nasm sdl2 protobuf speexdsp libplacebo wget python-setuptools json-c miniupnpc

      - name: Configure chiaki-ng
        run: |
          cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DCHIAKI_ENABLE_CLI=OFF -DCHIAKI_ENABLE_STEAMDECK_NATIVE=OFF -DCMAKE_PREFIX_PATH="$(brew --prefix)/opt/@openssl@3;$(brew --prefix)/opt/qt@6"

      - name: Build chiaki-ng
        run: |
          export CPATH=$(brew --prefix)/opt/ffmpeg/include
          cmake --build build --config Release --clean-first --target chiaki

      - name: Deploy chiaki-ng
        run: |
          cp -a build/gui/chiaki.app chiaki-ng.app
          cp scripts/qtwebengine_import.qml gui/src/qml/
          $(brew --prefix)/opt/qt@6/bin/macdeployqt chiaki-ng.app -qmldir="$PWD/gui/src/qml" -libpath=$(brew --prefix)/lib
          mkdir -p chiaki-ng.app/Contents/Resources/vulkan/icd.d
          wget https://github.com/KhronosGroup/MoltenVK/releases/download/v1.2.9/MoltenVK-macos.tar && tar xf MoltenVK-macos.tar
          cp MoltenVK/MoltenVK/dylib/macOS/* chiaki-ng.app/Contents/Resources/vulkan/icd.d
          $(brew --prefix)/opt/qt@6/bin/macdeployqt chiaki-ng.app -qmldir="$PWD/gui/src/qml" -libpath=$(brew --prefix)/lib
          ln -s ../../../../../../../Frameworks chiaki-ng.app/Contents/Frameworks/QtWebEngineCore.framework/Helpers/QtWebEngineProcess.app/Contents
          ln -s libvulkan.1.dylib chiaki-ng.app/Contents/Frameworks/vulkan
          codesign --force --entitlements gui/entitlements.xml --deep --sign - chiaki-ng.app
          hdiutil create -srcfolder chiaki-ng.app chiaki-ng.dmg
          codesign --force --entitlements gui/entitlements.xml --deep --sign - chiaki-ng.dmg
          cp chiaki-ng.dmg chiaki-ng-macos_arm64-Release.dmg

      - name: Upload chiaki-ng Artifact
        uses: nanoufo/action-upload-artifacts-and-release-assets@v2
        with:
          path: |
            chiaki-ng-macos_arm64-Release.dmg
          if-no-files-found: error
          upload-release-files: true
          release-upload-url: ${{ needs.create-release.outputs.upload_url }}

  build-appimage_x64:
    name: Build chiaki-ng appimage_x64
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: create-release
    
    steps:
      - name: Setup Podman
        run: |
          sudo apt update
          sudo apt-get -y install podman

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          path: 'chiaki-ng'

      - name: Add QmlWebEngine Import
        working-directory: chiaki-ng
        run: |
          cp scripts/qtwebengine_import.qml gui/src/qml/

      - name: Run build script
        working-directory: chiaki-ng
        run: |
          set -xe
          podman run --rm \
            -v "`pwd`:/build/chiaki" \
            -w "/build/chiaki" \
            --device /dev/fuse \
            --cap-add SYS_ADMIN \
            -t docker.io/streetpea/chiaki-ng-builder:qt6.7 \
            /bin/bash -c "sudo -E scripts/build-appimage.sh /build/appdir"
          cp appimage/chiaki-ng.AppImage appimage/chiaki-ng.AppImage_x86_64

      - name: Upload chiaki-ng Artifact
        uses: nanoufo/action-upload-artifacts-and-release-assets@v2
        with:
          path: |
            chiaki-ng/appimage/chiaki-ng.AppImage_x86_64
          upload-release-files: true
          if-no-files-found: error
          release-upload-url: ${{ needs.create-release.outputs.upload_url }}

  build-appimage_arm64:
    name: Build chiaki-ng appimage_arm64
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
    needs: create-release
    steps:
      - name: Setup Podman
        run: |
          sudo apt update
          sudo apt-get -y install podman

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          path: 'chiaki-ng'

      - name: Add QmlWebEngine Import
        working-directory: chiaki-ng
        run: |
          cp scripts/qtwebengine_import.qml gui/src/qml/

      - name: Run build script
        working-directory: chiaki-ng
        run: |
          set -xe
          podman run --rm \
            -v "`pwd`:/build/chiaki" \
            -w "/build/chiaki" \
            --device /dev/fuse \
            --cap-add SYS_ADMIN \
            -t docker.io/streetpea/chiaki-ng-builder:qt6.7 \
            /bin/bash -c "sudo -E scripts/build-appimage.sh /build/appdir"
          cp appimage/chiaki-ng.AppImage appimage/chiaki-ng.AppImage_arm64

      - name: Upload chiaki-ng Artifact
        uses: nanoufo/action-upload-artifacts-and-release-assets@v2
        with:
          path: |
            chiaki-ng/appimage/chiaki-ng.AppImage_arm64
          upload-release-files: true
          if-no-files-found: error
          release-upload-url: ${{ needs.create-release.outputs.upload_url }}

  build-switch_x64:
    name: Build chiaki-ng switch_x64
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: create-release
    
    steps:
      - name: Setup Docker
        run: |
          sudo apt update
          sudo apt-get -y install docker-ce-cli

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          path: 'chiaki-ng'

      - name: Run build script
        working-directory: chiaki-ng
        run: |
          chmod +x scripts/switch/run-docker-build-chiaki.sh
          scripts/switch/run-docker-build-chiaki.sh

      - name: Upload chiaki-ng Artifact
        uses: nanoufo/action-upload-artifacts-and-release-assets@v2
        with:
          path: |
            chiaki-ng/build_switch/switch/chiaki-ng.nro
          upload-release-files: true
          if-no-files-found: error
          release-upload-url: ${{ needs.create-release.outputs.upload_url }}